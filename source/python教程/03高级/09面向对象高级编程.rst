面向对象高级编程
====================================================================

给类绑定一个方法
----------------------------------------------

.. literalinclude:: ../../code/python教程/09.01.mountmethod.py
   :encoding: utf-8
   :language: python

slot
----------------------------------------------
Python允许在定义class的时候，定义一个特殊的__slots__变量，来限制该class实例能添加的属性

.. code-block:: python 

   class Student(object):
      __slots__ = ('name', 'age') # 用tuple定义允许绑定的属性名称


@property
----------------------------------------------
Python内置的@property装饰器就是负责把一个方法变成属性调用的。


.. literalinclude:: ../../code/python教程/09.02.property.py
   :encoding: utf-8
   :language: python

多重继承
----------------------------------------------
由于Python允许使用多重继承，因此，MixIn就是一种常见的设计.

.. literalinclude:: ../../code/python教程/09.03.mixin.py
   :encoding: utf-8
   :language: python


定制类
----------------------------------------------
__str__()返回用户看到的字符串，而__repr__()返回程序开发者看到的字符串。

.. code-block:: python 

   class Student(object):
    def __init__(self, name):
        self.name = name
    def __str__(self):
        return 'Student object (name=%s)' % self.name
    __repr__ = __str__

__iter__，该方法返回一个迭代对象，然后，Python的for循环就会不断调用该迭代对象的__next__()方法拿到循环的下一个值，直到遇到StopIteration错误时退出循环。

.. literalinclude:: ../../code/python教程/09.04.iter.py
   :encoding: utf-8
   :language: python

__getitem__可以实现按照下标来获取元素。

代码同上

__getattr__ 会在获取属性的时候进行调用。 

.. code-block:: python 

   class Student(object):
      def __init__(self):
        self.name = 'panda'

      def __getattr__(self,attr):
         if attr == "score":
            return 9999999

只有在没有找到属性的情况下，才调用__getattr__，已有的属性，比如name，不会在__getattr__中查找。

__call__ 可以让对象直接调用，通过callable()函数，我们就可以判断一个对象是否是“可调用”对象。

枚举
----------------------------------------------
Enum可以把一组相关常量定义在一个class中，且class不可变，而且成员可以直接比较。


.. code-block:: python 


   from enum import Enum, unique

   @unique
   class Weekday(Enum):
      Sun = 0 # Sun的value被设定为0
      Mon = 1
      Tue = 2
      Wed = 3
      Thu = 4
      Fri = 5
      Sat = 6

   
   In [2]: d1 = Weekday.Mon

   In [3]: d1
   Out[3]: <Weekday.Mon: 1>

   In [4]: print(d1)
   Weekday.Mon

   In [5]: print(d1.value)
   1

   In [6]: d2 =Weekday(2)

   In [7]: d2 == Weekday.Tue
   Out[7]: True

   In [8]: 2 == Weekday.Tue
   Out[8]: False


元类
----------------------------------------------

.. literalinclude:: ../../code/python教程/09.05.metaclass.py
   :encoding: utf-8
   :language: python
