类和对象
====================================================================

改变对象的字符串显示
----------------------------------------------
要改变一个实例的字符串表示，可重新定义它的 __str__() 和 __repr__() 方法

如果 __str__() 没有被定义，那么就会使用 __repr__() 来代替输出。

.. code-block:: python 

    class Pair:
        def __init__(self, x, y):
            self.x = x
            self.y = y

        def __repr__(self):
            return 'Pair({0.x!r}, {0.y!r})'.format(self)

        def __str__(self):
            return '({0.x!s}, {0.y!s})'.format(self)

自定义字符串显示
----------------------------------------------
为了自定义字符串的格式化，我们需要在类上面定义 __format__() 方法。

.. literalinclude:: ../../code/cookbook/08.custom_format.py
   :encoding: utf-8
   :language: python

让对象支持上下文管理协议
----------------------------------------------

为了让一个对象兼容 with 语句，你需要实现 __enter__() 和 __exit__() 方法.

.. literalinclude:: ../../code/cookbook/08.with.py
   :encoding: utf-8
   :language: python

创建大量对象时节省内存方法
----------------------------------------------
对于主要是用来当成简单的数据结构的类而言，你可以通过给类添加 __slots__ 属性来极大的减少实例所占的内存。
当你定义 __slots__ 后，Python就会为实例使用一种更加紧凑的内部表示。 实例通过一个很小的固定大小的数组来构建，而不是为每个实例定义一个字典，这跟元组或列表很类似。 在 __slots__ 中列出的属性名在内部被映射到这个数组的指定小标上。
使用slots一个不好的地方就是我们不能再给实例添加新的属性了，只能使用在 __slots__ 中定义的那些属性名。

.. literalinclude:: ../../code/cookbook/08.slots.py
   :encoding: utf-8
   :language: python

在类中封装属性名
----------------------------------------------
Python程序员不去依赖语言特性去封装数据，而是通过遵循一定的属性和方法命名规约来达到这个效果。 第一个约定是任何以单下划线_开头的名字都应该是内部实现。

创建可管理的属性
----------------------------------------------
你想给某个实例attribute增加除访问与修改之外的其他处理逻辑，比如类型检查或合法性验证。

.. literalinclude:: ../../code/cookbook/08.property.py
   :encoding: utf-8
   :language: python

调用父类方法
----------------------------------------------
为了调用父类(超类)的一个方法，可以使用 super() 函数。

.. literalinclude:: ../../code/cookbook/08.super.py
   :encoding: utf-8
   :language: python

子类中扩展property
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.extend_protery.py
   :encoding: utf-8
   :language: python


创建新的类或实例属性
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.desc.py
   :encoding: utf-8
   :language: python

使用延迟计算属性
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.layz_compute.py
   :encoding: utf-8
   :language: python


简化数据结构的初始化
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.multi_init.py
   :encoding: utf-8
   :language: python

定义接口或者抽象基类
----------------------------------------------

标准库中有很多用到抽象基类的地方。collections 模块定义了很多跟容器和迭代器(序列、映射、集合等)有关的抽象基类。

.. literalinclude:: ../../code/cookbook/08.abc.py
   :encoding: utf-8
   :language: python

实现自定义容器
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.custom_pod.py
   :encoding: utf-8
   :language: python

代理属性
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.proxy_attr.py
   :encoding: utf-8
   :language: python

在类中定义多个构造器
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.create_obj.py
   :encoding: utf-8
   :language: python


利用Mixins扩展类功能
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.mixed.py
   :encoding: utf-8
   :language: python

实现状态对象或者状态机
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.state.py
   :encoding: utf-8
   :language: python

通过字符串调用对象方法
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.caller.py
   :encoding: utf-8
   :language: python

实现访问者模式
----------------------------------------------

.. literalinclude:: ../../code/cookbook/08.calc.py
   :encoding: utf-8
   :language: python

不用递归实现访问者模式
----------------------------------------------


让类支持比较操作
----------------------------------------------