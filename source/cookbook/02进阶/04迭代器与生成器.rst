迭代器与生成器
====================================================================

手动遍历迭代器
----------------------------------------------

.. code-block:: python 

    In [5]: a = iter(range(1,3))

    In [6]: next(a)
    Out[6]: 1

    In [7]: next(a)
    Out[7]: 2

    In [8]: next(a)
    ---------------------------------------------------------------------------
    StopIteration                             Traceback (most recent call last)
    Cell In[8], line 1
    ----> 1 next(a)

    StopIteration: 

    In [10]: b=next(a,None)

    In [11]: b

    In [12]: b is None
    Out[12]: True


代理迭代
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.proxyiter.py
   :encoding: utf-8
   :language: python

使用生成器创建新的迭代模式
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.generator.py
   :encoding: utf-8
   :language: python

实现迭代器协议
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.imp_iter.py
   :encoding: utf-8
   :language: python

反向迭代
----------------------------------------------
使用内置的 reversed() 函数 。

.. literalinclude:: ../../code/cookbook/04.reversed.py
   :encoding: utf-8
   :language: python

带有外部状态的生成器函数
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.iter_class.py
   :encoding: utf-8
   :language: python

迭代器切片
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.is_slice.py
   :encoding: utf-8
   :language: python

跳过可迭代对象的开始部分
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.dropwhile.py
   :encoding: utf-8
   :language: python


排列组合的迭代
----------------------------------------------

- 排列： ``itertools.permutations()``
- 组合： ``itertools.combinations()``
- 带重复： ``itertools.combinations_with_replacement()``

.. code-block:: python 

    In [1]: items = ['a', 'b', 'c']

    In [2]: import itertools

    In [3]: list(itertools.combinations(items,2))
    Out[3]: [('a', 'b'), ('a', 'c'), ('b', 'c')]

    In [4]: list(itertools.combinations_with_replacement(items,2))
    Out[4]: [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]

    In [5]: list(itertools.permutations(items,2))
    Out[5]: [('a', 'b'), ('a', 'c'), ('b', 'a'), ('b', 'c'), ('c', 'a'), ('c', 'b')]

序列上索引值迭代
----------------------------------------------

.. code-block:: python 

    In [6]: a=['a','b','c']

    In [7]: for lineno,item in enumerate(a,1):
    ...:     print(lineno,item)
    ...: 
    1 a
    2 b
    3 c

同时迭代多个序列
----------------------------------------------

.. code-block:: python 

    In [8]: l1 = ['a','b','c']

    In [9]: l2 = ['A','B','C']

    In [10]: l3 = [1,2,3]

    In [12]: for i in zip(l1,l2,l3):
        ...:     print(i)
        ...: 
    ('a', 'A', 1)
    ('b', 'B', 2)
    ('c', 'C', 3)

    In [13]: dict(zip(l1,l2))
    Out[13]: {'a': 'A', 'b': 'B', 'c': 'C'}

    In [14]: for a,b in zip(l1,l2):
        ...:     print(a,b)
        ...: 
    a A
    b B
    c C


不同集合上元素的迭代
----------------------------------------------

.. code-block:: python 

    # Inefficent
    for x in a + b:
        ...

    # Better
    for x in chain(a, b):


创建数据处理管道
----------------------------------------------
todo


展开嵌套的序列
----------------------------------------------

.. literalinclude:: ../../code/cookbook/04.flatten.py
   :encoding: utf-8
   :language: python

顺序迭代合并后的排序迭代对象
----------------------------------------------

.. code-block:: python 

    In [1]: a=[1,3,5,7]

    In [2]: b=[0,2,4,8,6]

    In [3]:  import heapq

    In [5]: list(heapq.merge(a,b))
    Out[5]: [0, 1, 2, 3, 4, 5, 7, 8, 6]