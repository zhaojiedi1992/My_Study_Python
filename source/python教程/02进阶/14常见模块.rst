常见模块
====================================================================


datetime
----------------------------------------------
datetime是Python处理日期和时间的标准库。

datetime表示的时间需要时区信息才能确定一个特定的时间，否则只能视为本地时间。

如果要存储datetime，最佳方法是将其转换为timestamp再存储，因为timestamp的值与时区完全无关。

.. literalinclude:: ../../code/python教程/14.01.datetime.py
   :encoding: utf-8
   :language: python

collections
----------------------------------------------
collection是python内建的一个集合模块，提供了许多有用的集合类。

**namedtuple**

namedtuple是一个函数，它用来创建一个自定义的tuple对象。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [namedtuple_start]
   :end-before: [namedtuple_end]


**deque**

deque是为了高效实现插入和删除操作的双向列表，适合用于队列和栈。 list不适合频繁插入删除。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [deque_start]
   :end-before: [deque_end]

**defaultdict**

如果希望key不存在时，返回一个默认值，就可以用defaultdict。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [defaultdict_start]
   :end-before: [defaultdict_end]


**OrderedDict**

如果要保持Key的顺序，可以用OrderedDict。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [OrderedDict_start]
   :end-before: [OrderedDict_end]


**ChainMap**

ChainMap是可以把一组dict串起来组成的逻辑dict,会优先查找内部的dict,依次查找外部。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [ChainMap_start]
   :end-before: [ChainMap_end]

**Counter**

counter是一个简单的计数器。

.. literalinclude:: ../../code/python教程/14.02.collections.py
   :encoding: utf-8
   :language: python
   :start-after: [Counter_start]
   :end-before: [Counter_end]

argparser
----------------------------------------------
argparse是用于解析命令行参数的。

.. literalinclude:: ../../code/python教程/14.03.argparse.py
   :encoding: utf-8
   :language: python

base64
----------------------------------------------
base64是一种64个字符来表示任意二进制数据的方法。 

base64是64个字符，包含26个字母的大写和小写，数字10个，另外包含'+' 和 '/' 。

在urlsafe中，将'+'变成'-'，将'/'变成'_'。


.. code-block:: python 

   In [5]: base64.b64encode(b'i\xb7\x1d\xfb\xef\xff')
   Out[5]: b'abcd++//'

   In [6]: base64.urlsafe_b64encode(b'i\xb7\x1d\xfb\xef\xff')
   Out[6]: b'abcd--__'

struct
----------------------------------------------
todo

hashlib
----------------------------------------------
可以通过hashlib计算摘要信息。 

.. code-block:: python 

   In [7]: import hashlib

   In [8]: md5 = hashlib.md5()

   In [9]: md5.update('zhaojiedi'.encode('utf-8'))

   In [10]: md5.hexdigest()
   Out[10]: 'efb605a4a365423301d33afec4138813'

hmac
----------------------------------------------

.. code-block:: python 

   In [1]: import hmac

   In [2]: message=b'abc'

   In [3]: key=b'secret'

   In [4]: h = hmac.new(key,message,digestmod='md5')

   In [5]: h.hexdigest()
   Out[5]: 'd9bf7c3a63eae7031c4e6d7c9b78ba93'


itertools
----------------------------------------------

.. code-block:: python 

   # 三个字母循环的。
   cs = itertools.cycle('ABC')

   # 重复一个元素多次
   ns = itertools.repeat('A', 3)

   # 提前特定个数
   itertools.takewhile(lambda x: x <= 10, natuals)

   # 整合一个大的
   for c in itertools.chain('ABC', 'XYZ'):

   # groupby()把迭代器中相邻的重复元素挑出来放在一起：
   for key, group in itertools.groupby('AAABBBCCAAA'):
       print(key, list(group))

contextlib
----------------------------------------------
实现上下文管理是通过__enter__和__exit__这两个方法实现的。

编写__enter__和__exit__仍然很繁琐，因此Python的标准库contextlib提供了更简单的写法

如果一个对象没有实现上下文，我们就不能把它用于with语句。这个时候，可以用closing()来把该对象变为上下文对象


.. literalinclude:: ../../code/python教程/14.04.with.py
   :encoding: utf-8
   :language: python

request
----------------------------------------------

.. literalinclude:: ../../code/python教程/14.05.request.py
   :encoding: utf-8
   :language: python
